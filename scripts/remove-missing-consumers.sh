#!/usr/bin/env bash
set -e

###
# User-defined variables
#

# Abacus service instance credentials
CLIENT_ID=abacus-rp-e6e679b1-84e6-4963-8827-fd46e6b31a2e-bbe5be10-b2b6-44f0-b626-ffb13461b2f4
CLIENT_SECRET=OKTo7YwCB4
RESOURCE_ID=e6e679b1-84e6-4963-8827-fd46e6b31a2e
ORG_GUID=74d1bd47-6064-4b3f-b52e-6a6e4dd398cb

# Generated by service-tunnel.sh
CONNECTIONS=(
"mongodb://c220a1c454c636dfd78141583ff1001d:da1eca5368e57c085acd6b2b21d32c12@localhost:27018/f5da3b81b9d8dc87"
"mongodb://3167d223f9fb7e89dbd62a0166854ec4:de9c12092c12493cafbcd0e9cef3ff4a@localhost:27022/e7a888ec3bec00b0"
"mongodb://3241cceb6ce7fa213a2dd038b9782e6e:1f4c80c8f01f5ebd0e499537765808d3@localhost:27024/95f43b215bc706f4"
)
#
# End of user-defined variables block
###

API=$(cf api | awk '{if (NR == 1) {print $3}}')
AUTH_SERVER=${API/api./uaa.}
DOMAIN=$(cf domains | awk '{if (NR == 3) {print $1}}')
DOMAIN=${DOMAIN/cfapps/cf}
SCOPE="abacus.usage.$RESOURCE_ID.read"
TOKEN=$(curl -k --user $CLIENT_ID:$CLIENT_SECRET -s "$AUTH_SERVER/oauth/token?grant_type=client_credentials&scope=$SCOPE" | jq -r .access_token)
DATE_IN_MS="$(date +%s000)"
URL="https://${ABACUS_PREFIX}abacus-usage-reporting.$DOMAIN/v1/metering/organizations/${ORG_GUID}/aggregated/usage/$DATE_IN_MS"
CODE=$(curl -ksL -w "%{http_code}\\n" -H "Authorization: bearer $TOKEN" -H 'Content-Type: application/json' $URL -o /dev/null)

while [[ $CODE -ne 200 ]]; do
  echo ""
  echo "Response code $CODE != 200 ..."
  echo ""
  TOKEN=$(curl -k --user $CLIENT_ID:$CLIENT_SECRET -s "$AUTH_SERVER/oauth/token?grant_type=client_credentials&scope=$SCOPE" | jq -r .access_token)
  OUTPUT=$(curl -ksL -H "Authorization: bearer $TOKEN" -H "Content-Type: application/json" $URL | cut -d ':' -f 4)
  APP_ID=${OUTPUT:0:36}
  TIME=${OUTPUT:39:16}
  if [[ -z $APP_ID ]]; then
    echo "Cannot find application id"
    exit 1
  fi
  echo "Removing app:$APP_ID/t/$TIME ..."
  echo ""
  for CON in "${CONNECTIONS[@]}"; do
    EVAL_SCRIPT="db.getCollectionNames().forEach(function(c) { if ( c.indexOf('abacus') != -1 ) { print(c); var result = db.getCollection(c).updateMany({}, { \$pull: { spaces: { consumers: { id: 'app:$APP_ID', t: '$TIME' } } } } ); printjson(result); } })"
    mongo "$CON" --eval "$EVAL_SCRIPT" &
  done
  wait
  CODE=$(curl -ksL -w "%{http_code}\\n" -H "Authorization: bearer $TOKEN" -H 'Content-Type: application/json' $URL -o /dev/null)
done
